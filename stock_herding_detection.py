# -*- coding: utf-8 -*-
"""Paper_4_Stock_Herding_Detection_revision.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BN9C_pHxW27H0Z2QG157cg0QIuqTH77h

# **Importing Packages**
"""


import pandas as pd
import numpy as np
import plotly.express as px
import statsmodels.api as sm
import matplotlib.pyplot as plt

import itertools

def flatten_list(nested_list):
    return list(itertools.chain(*nested_list))

from google.colab import drive
drive.mount('/content/drive')

"""# **Reading Data**"""

# Read Stock data
data_stock = pd.read_csv("data/stock_30min_official_trading_filled_missing(ffill).csv")
data_stock = data_stock.set_index("date")

"""**Convert prices to returns**"""

# Find log-returns
names = data_stock.columns
numpy_data = data_stock.to_numpy()
original = numpy_data[:-1]
onelag = numpy_data[1:]
logreturns = np.log(onelag) - np.log(original)

return_data = pd.DataFrame(data = logreturns, columns = names)
return_data["date"] = data_stock.index[1:]
return_data = return_data.set_index(['date'])


# Calculate the market return at each time point, i.e. the average return of all assets
market_return = pd.DataFrame(return_data.mean(axis=1), columns = ["mean market return"])
market_return.index = return_data.index

fig_market_return = px.line(market_return, x='date', y= "mean market return", title='30-min market return')

num_assets = len(names)
market_return_repeat = pd.concat([market_return] * num_assets, axis=1, ignore_index=True)
market_return_repeat.columns = return_data.columns


"""# **Herding Detection**

---


We use the Cross-Sectional Absolute Deviation (CSAD) model to detect the herding behavior in financial markets. This is one of the most well-known herding behavior detection approaches that has been used widely in many studies.

The fundamental idea of this technique is to examine the relationship between the average return (market return) of a set of assets and the dispersion across each asset return (CSAD). A herding signal is pronounced when the market return changes significantly (i.e. the market experiences large fluctuations, either going up or down) while the dispersion between asset returns decreases (i.e. the return movements of different assets become more similar). In this study, we use two forms of the CSAD model for our experiments.
+ $CSAD_t = \beta_0 + \beta_1|r_{m,t}| + \beta_2 r_{m,t}^2 + \epsilon_t$
+ $CSAD_t = \gamma_0 + \gamma_1 D^{up} |r_{m,t}| + \gamma_2 D^{up} r_{m,t}^2 + \gamma_3 D^{down} |r_{m,t}| + \gamma_4 D^{down} r_{m,t}^2 + \zeta_t$

Where $CSAD_t = \sum\limits_{k = 1}^T |r_{i,t} - r_{m,t}| / T$; $r_{i,t}$ is the return of asset $i$ at time $t$; $r_{m,t} = \sum\limits_{k = 1}^{N} r_{k,t} / N $ is the average of asset returns (also known as the market return) at time $t$; $\beta_0, \beta_1, \beta_2, \gamma_0, \gamma_1, \gamma_2, \gamma_3, \gamma_4$ are regression coefficients, $D^{up} = 1$ if $r_{m,t}$ is positive, otherwise $0$; $D^{down} = 1$ if $r_{m,t}$ is negative, otherwise $0$; $\epsilon_t, \zeta_t$ are error terms at time $t$.

Regarding the first equation, a herding exists when the parameter $\beta_2$ is significantly negative (a negative coefficient with a confidence level of at least 90\%). Intuitively, we expect this coefficient to be negative because it follows the idea of the herding behavior, i.e. a dramatic increase or decrease in the market return ($r_{m,t}^2$) coincides with a decline (negative $\beta_2$) in the dispersion between corresponding assets' returns ($CSAD_t$). The second equation refers to a more detailed version of the first one in which we separate the market condition into $\textit{up}$ (i.e. positive market return) and $\textit{down}$ (i.e. non-positive market return) so that the herding can be detected during the $\textit{up}$ and $\textit{down}$ market condition separately, instead of considering all market conditions (i.e. both $\textit{up}$ and $\textit{down}$ equally) as declared in the first form. The use of both forms for herding detection comes from an expectation that there might be periods when herding does not exist when considering both up and down market conditions at the same time but it might be found in the $\textit{up}$ or $\textit{down}$ market condition only. To this end, the same logic of the first equation is applied to the second equation wherein a significantly negative $\gamma_2$ refers to a herding signal during the $\textit{up}$ market condition while a significantly negative $\gamma_3$ refers to a herding signal during the $\textit{down}$ market condition.


---

---


**NOTE: The code below is for the entire data comprising of three types of investment vehicle as described in the paper. If you want to run herding detection on one particular type of investment vehicle only, change the "Reading Data" section at the beginning of this script to that appropriate data**

---

**Calculating CSAD and other features**
"""

csad = np.sum(np.abs(return_data - market_return_repeat), axis = 1)/num_assets

rmt = market_return.values
rmt_abs = np.abs(market_return.values)
rmt_squared = (market_return.values)**2
alpha = np.ones(len(market_return))
variables_csad = pd.DataFrame(data = np.asarray([csad.values, alpha, np.squeeze(rmt), np.squeeze(rmt_abs), np.squeeze(rmt_squared)]).T, columns = ["csad", "alpha", "rmt", "rmt_abs", "rmt_squared"])

variables_csad.index = market_return.index

"""# **Timeline Partition**

+ Pre-Covid-19 : 04/2019 - 12/2019 -> return_data[:2464]

+ Covid-19     : 01/2020 - 06/2020 -> return_data[2464:4089]

+ Bull Time 1: 07/2020 - 1/2021 -> return_data[4089:5988]

+ Bull Time 2: 02/2021 - 08/2021 -> return_data[5988:7912]

+ Bull Time 3: 09/2021 - 23/02/2022 -> return_data[7912:9479]

+ U-R Conflict 1: 24/02/2022 - 09/2022 -> return_data[9479:11455]

+ U-R Conflict 2: 10/2022 - 05/2023 -> return_data[11455:]

**Forming a regression model to estimate the parameters of the herding detection equation**

**Entire Period**
"""

X = variables_csad[['alpha', 'rmt_abs', 'rmt_squared']]
Y = variables_csad["csad"]

## fit a OLS model with intercept on TV and Radio
#X = sm.add_constant(X)
X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

"""**Sub-periods**"""

# start - 12/2019 [:2464]
X = variables_csad[['alpha', 'rmt_abs', 'rmt_squared']][:2464]
Y = variables_csad["csad"][:2464]

## fit a OLS model with intercept on TV and Radio
#X = sm.add_constant(X)
X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

# Time Window 2  01/2020 - 06/2020 -> return_data[2464:4089]
X = variables_csad[['alpha', 'rmt_abs', 'rmt_squared']][2464:4089]
Y = variables_csad["csad"][2464:4089]

## fit a OLS model with intercept on TV and Radio
#X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

# Time Window 3   07/2020 - 1/2021 -> return_data[4089:5988]
X = variables_csad[['alpha', 'rmt_abs', 'rmt_squared']][4089:5988]
Y = variables_csad["csad"][4089:5988]

## fit a OLS model with intercept on TV and Radio
#X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

# Time Window 4  02/2021 - 08/2021 -> return_data[5988:7912]
X = variables_csad[['alpha', 'rmt_abs', 'rmt_squared']][5988:7912]
Y = variables_csad["csad"][5988:7912]

## fit a OLS model with intercept on TV and Radio
#X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

# Time Window 5  09/2021 - 23/02/2022 -> return_data[7912:9479]
X = variables_csad[['alpha', 'rmt_abs', 'rmt_squared']][7912:9479]
Y = variables_csad["csad"][7912:9479]

## fit a OLS model with intercept on TV and Radio
#X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

# Time Window 6   24/02/2022 - 09/2022 -> return_data[9479:11455]
X = variables_csad[['alpha', 'rmt_abs', 'rmt_squared']][9479:11455]
Y = variables_csad["csad"][9479:11455]

## fit a OLS model with intercept on TV and Radio
#X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

# Time Window 7    10/2022 - 05/2023 -> return_data[11455:]
X = variables_csad[['alpha', 'rmt_abs', 'rmt_squared']][11455:]
Y = variables_csad["csad"][11455:]

## fit a OLS model with intercept on TV and Radio
#X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

"""**Second Equation: CSAD for Up and Down Markets**"""

D_up_R_abs = market_return["mean market return"].apply(lambda x: x if x > 0.0 else 0.0)
D_up_R_squared = market_return["mean market return"].apply(lambda x: x**2 if x> 0.0 else 0.0)
D_down_R_abs = market_return["mean market return"].apply(lambda x: np.abs(x) if x < 0.0 else 0.0)
D_down_R_squared = market_return["mean market return"].apply(lambda x: x**2 if x < 0.0 else 0.0)
alpha = np.ones(len(market_return))

variables_csad = pd.DataFrame(data = np.asarray([csad.values, alpha, D_up_R_abs, D_up_R_squared, D_down_R_abs, D_down_R_squared]).T, columns = ["csad", "alpha", "duprabs","duprsquared","ddownrabs","ddownrsquared"])

variables_csad.index = market_return.index

variables_csad

"""**Entire Period**"""

X = variables_csad[['alpha', 'duprabs', 'duprsquared', 'ddownrabs', 'ddownrsquared']]
Y = variables_csad["csad"]
X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

"""**Sub-Period**"""

# Pre-Covid-19: start - 12/2019
X = variables_csad[['alpha', 'duprabs', 'duprsquared', 'ddownrabs', 'ddownrsquared']][:2464]
Y = variables_csad["csad"][:2464]
# X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

# Covid-19: 01.2020 - 06.2020 [2464:4089]
X = variables_csad[['alpha', 'duprabs', 'duprsquared', 'ddownrabs', 'ddownrsquared']][2464:4089]
Y = variables_csad["csad"][2464:4089]
# X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

# Bull Time 1: 07/2020 - 1/2021 -> return_data[4089:5988]
X = variables_csad[['alpha', 'duprabs', 'duprsquared', 'ddownrabs', 'ddownrsquared']][4089:5988]
Y = variables_csad["csad"][4089:5988]
# X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

# Bull Time 2: 02/2021 - 08/2021 -> return_data[5988:7912]
X = variables_csad[['alpha', 'duprabs', 'duprsquared', 'ddownrabs', 'ddownrsquared']][5988:7912]
Y = variables_csad["csad"][5988:7912]
# X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

# Bull Time 3:  09/2021 - 23/02/2022 -> return_data[7912:9479]
X = variables_csad[['alpha', 'duprabs', 'duprsquared', 'ddownrabs', 'ddownrsquared']][7912:9479]
Y = variables_csad["csad"][7912:9479]
# X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

# Time window 6: 24/02/2022 - 09/2022 -> return_data[9479:11455]
X = variables_csad[['alpha', 'duprabs', 'duprsquared', 'ddownrabs', 'ddownrsquared']][9479:11455]
Y = variables_csad["csad"][9479:11455]
# X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()

# Time window 7: 10/2022 - 05/2023 -> return_data[11455:]
X = variables_csad[['alpha', 'duprabs', 'duprsquared', 'ddownrabs', 'ddownrsquared']][11455:]
Y = variables_csad["csad"][11455:]
# X = sm.add_constant(X)
est = sm.OLS(Y, X).fit()
est.summary()